name: Tests

on:
  pull_request:
    branches: [ main, master, dev ]
  push:
    branches: [ main, master, dev ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gcc
    
    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
    
    - name: Install Cython
      run: |
        pip install Cython
    
    - name: Install package with dependencies
      run: |
        pip install -e .
    
    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov
        pip install networkx
    
    - name: Install igraph (non-Windows)
      if: runner.os != 'Windows'
      continue-on-error: true
      run: |
        pip install python-igraph
    
    - name: List installed packages
      run: |
        pip list
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short --cov=fa2_modified --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-minimal:
    name: Test minimal dependencies (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install Cython
        pip install -e .
        pip install pytest
    
    - name: Run core tests only
      run: |
        pytest tests/test_fa2util.py tests/test_forceatlas2.py -v

  test-without-cython:
    name: Test without Cython (Python 3.11)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install without Cython
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install dependencies but not Cython
        pip install numpy scipy tqdm pytest networkx
        # Try to install the package (should fall back to pure Python or pre-generated C)
        pip install -e . || echo "Installation failed as expected without Cython"
    
    - name: Run basic tests
      run: |
        pytest tests/test_fa2util.py -v || echo "Tests may fail without compiled extension"

  lint:
    name: Linting and code quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Check with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 fa2_modified --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 fa2_modified --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check fa2_modified/ tests/ || echo "Code needs formatting"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only fa2_modified/ tests/ || echo "Imports need sorting"

